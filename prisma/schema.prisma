datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  boards        Board[]
  columns       Column[]
  tasks         Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String @id @default(cuid())
  name        String
  description String

  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  tasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Board {
  id          String @id @default(cuid())
  name        String
  description String

  columns Column[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Column {
  id    String @id @default(cuid())
  name  String
  order Int
  color String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board   Board?  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  tasks  Task[]
}

model Task {
  id      String @id @default(cuid())
  title   String
  content String

  column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
}
